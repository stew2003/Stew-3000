
Hardware
  [x] implement sign flag and signed overflow flag (Stewart)
  [x] implement dream instruction set in microcode (Stewart)
  [x] get the RAM loader working (Stewart)

Assembler
  [x] model our instr set with OCaml datatypes. will be used by assembler,
    compiler, and virtual machine
  [x] think about how to implement labels
  [x] implement assembler
  [x] maybe switch from hashtable to different map
  [x] reconsider how we validate immediates: currently prevents you
    from writing an immediate that is a mem loc >127
  [x] track source locations for error messages

Compiler
  [x] decide on language constructs
  [] parser 
  [] implement compiler
  [] type checking
    NOTE: 
    - non-void functions must return value in all branches
    - void functions must not contain any return *with a value*
  [] implement optimizations for smol code
    [] "compile to" given register (reduce movs)
    [] eliminate redundant instrs
    [] special-case conditions (if/while)
    [] replace addi 1, _ / subi 1, _ with inr/dcr
    [] remove addi 0, subi 0, etc (no effect)
  [] preprocessor?

Emulator
  [x] fix emulation of 8-bit integers
  [x] rewrite overflow flag
  [] use actual byte addresses as opposed to list indices
  [] bin/emulate can now throw assemble errors
  [] display registers in decimal/hex/binary
  [] "step" mode for emulator for debugging
    [] simple command language?

[] document everything
