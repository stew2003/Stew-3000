
Hardware
  [x] implement sign flag and signed overflow flag (Stewart)
  [x] implement dream instruction set in microcode (Stewart)
  [x] get the RAM loader working (Stewart)

Assembler
  [x] model our instr set with OCaml datatypes. will be used by assembler,
    compiler, and virtual machine
  [x] think about how to implement labels
  [x] implement assembler
  [x] maybe switch from hashtable to different map
  [x] reconsider how we validate immediates: currently prevents you
    from writing an immediate that is a mem loc >127
  [x] track source locations for error messages

Compiler
  [x] decide on language constructs
  [x] parser
  [x] runtime
    [x] add assert to runtime
    [x] test runtime
  [x] add compiler binary
  [x] compiler tests using parser
  [x] implement compiler
  [x] type checking
    [x] tests for checking
    [x] add checking to bin/compile + handle errors in bin/err
    [x] type check logical operators
  [x] preprocessor
  [] implement optimizations for smol code
    Pre-compile: 
      [x] constant folding 
    During compile:
      [] special-case compilation of conditions (if/while)
      [] "compile to" given register (reduce movs)
    Post-compile:
      [] eliminate redundant instrs
        [] sts a, 1; lds 1, a ==> sts a, 1 (for instance)
      [] replace addi 1, _ / subi 1, _ with inr/dcr
      [] remove addi 0, subi 0, etc (no effect)

Emulator
  [x] fix emulation of 8-bit integers
  [x] rewrite overflow flag
  [x] use actual byte addresses as opposed to list indices
  [x] bin/emulate can now throw assemble errors
  [x] display registers in decimal/hex/binary
  [x] "step" mode for emulator for debugging
    [x] simple command language
    [x] add shortcuts
    [x] `continue` command
  [x] better printing of decimal display

[] document everything
